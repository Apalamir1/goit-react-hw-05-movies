{"version":3,"file":"static/js/219.1d82bb49.chunk.js","mappings":"oRAEaA,EAAWC,EAAAA,EAAAA,GAAH,4MAURC,EAAWD,EAAAA,EAAAA,GAAH,qGAMRE,EAAQF,EAAAA,EAAAA,IAAH,0CAILG,EAAYH,EAAAA,EAAAA,EAAH,+HAQTI,EAAiBJ,EAAAA,EAAAA,EAAH,wJASdK,EAAeL,EAAAA,EAAAA,EAAH,wJ,SC5BV,SAASM,IACtB,OAAgCC,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACQC,GAAaC,EAAAA,EAAAA,MAAbD,SAcR,OAZAE,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAE4BC,EAAAA,EAAAA,IAAeH,GAF3C,OAEUI,EAFV,OAGIL,EAAYK,EAAUC,MACtBC,QAAQC,IAAIH,EAAUC,MAJ1B,gDAMIC,QAAQC,IAAR,MANJ,0DADc,uBAAC,WAAD,wBAUdC,EACD,GAAE,CAACR,KAEF,8BACuB,IAApBF,EAASW,QACR,SAACpB,EAAD,UACGS,EAASY,KAAI,SAAAC,GAAK,OACjB,UAACpB,EAAD,WACGoB,EAAMC,cACL,SAACpB,EAAD,CACEqB,IAAG,0CAAqCF,EAAMC,cAC9CE,IAAKH,EAAMI,QAGb,SAACvB,EAAD,CACEqB,IAAI,mFACJC,IAAKH,EAAMI,QAIf,SAACtB,EAAD,UAAYkB,EAAMI,QAClB,SAACrB,EAAD,UAAiBiB,EAAMK,cAdVL,EAAMM,GADJ,OAoBrB,SAACtB,EAAD,UAAc,yGAOrB,C,8LCxDKuB,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NAMOC,EAAgB,mCAAG,oGACPC,EAAAA,EAAAA,IACrB,iEACAN,GAH4B,cACxBO,EADwB,yBAKvBA,EAASC,MALc,2CAAH,qDAShBC,EAAiB,mCAAG,WAAMV,GAAN,uFACRO,EAAAA,EAAAA,IAAA,6CACiBP,EADjB,mBAErBC,GAH6B,cACzBO,EADyB,yBAKxBA,EAASC,MALe,2CAAH,sDASjBvB,EAAc,mCAAG,WAAMc,GAAN,uFACLO,EAAAA,EAAAA,IAAA,6CACiBP,EADjB,2BAErBC,GAH0B,cACtBO,EADsB,yBAKrBA,EAASC,MALY,2CAAH,sDASdE,EAAiB,mCAAG,WAAMX,GAAN,uFACRO,EAAAA,EAAAA,IAAA,6CACiBP,EADjB,kCAErBC,GAH6B,cACzBO,EADyB,yBAKxBA,EAASC,MALe,2CAAH,sDAOjBG,EAAmB,mCAAG,WAAMC,GAAN,uFACVN,EAAAA,EAAAA,IACrB,4CACA,CACEO,OAAQ,CACNC,MAAOF,EACPG,QA3CI,sCAqCuB,cAC3BR,EAD2B,yBAU1BA,EAASC,MAViB,2CAAH,qD","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.js","components/optionsAPI.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastList = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 250px);\n  gap: 16px;\n  text-align: center;\n  justify-content: center;\n  text-decoration: none;\n  padding-left: 0;\n`;\n\nexport const CastItem = styled.li`\n  box-shadow: 0px 0px 2px 3px rgb(105,105,105));\n  border-radius: 4px;\n  \n`;\n\nexport const Image = styled.img`\n  height: 375px;\n`;\n\nexport const ActorName = styled.p`\n  font-size: 24px;\n  font-weight: 600;\n  color: #000;\n  margin-bottom: 5px;\n  text-align: center;\n`;\n\nexport const ActorCharacter = styled.p`\n  font-size: 20px;\n  font-weight: 500;\n  margin-bottom: 5px;\n  color: dimgrey;\n  line-height: 30px;\n  text-align: center;\n`;\n\nexport const Notification = styled.p`\n  font-size: 20px;\n  font-weight: 500;\n  margin-bottom: 5px;\n  color: dimgrey;\n  line-height: 30px;\n  text-align: center;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCast } from '../optionsAPI';\nimport {\n  CastList,\n  CastItem,\n  Image,\n  ActorName,\n  ActorCharacter,\n  Notification,\n} from './Cast.styled';\nexport default function Cast() {\n  const [castInfo, setCastInfo] = useState([]);\n  const { moviesId } = useParams();\n\n  useEffect(() => {\n    async function getCastInfo() {\n      try {\n        const movieCast = await fetchMovieCast(moviesId);\n        setCastInfo(movieCast.cast);\n        console.log(movieCast.cast);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    getCastInfo();\n  }, [moviesId]);\n  return (\n    <>\n      {castInfo.length !== 0 ? (\n        <CastList>\n          {castInfo.map(actor => (\n            <CastItem key={actor.id}>\n              {actor.profile_path ? (\n                <Image\n                  src={`https://image.tmdb.org/t/p/w500/${actor.profile_path}`}\n                  alt={actor.name}\n                />\n              ) : (\n                <Image\n                  src=\"https://upload.wikimedia.org/wikipedia/commons/4/43/Illustration_of_an_image.png\"\n                  alt={actor.name}\n                />\n              )}\n\n              <ActorName>{actor.name}</ActorName>\n              <ActorCharacter>{actor.character}</ActorCharacter>\n            </CastItem>\n          ))}\n        </CastList>\n      ) : (\n        <Notification>\n          There is no information about the actors of this film, maybe the data\n          will appear later, stay tuned\n        </Notification>\n      )}\n    </>\n  );\n}\n","import axios from 'axios';\n\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI1NDM1MjBlMmZlMzk5MjljOTA4OGFmNzg1YzcxMWY1OSIsInN1YiI6IjY0OTkzMmNhYmJkMGIwMDBhZGYxMzUxNyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.41RqzxpX4fIzZ0nIoO92sdGG4PVnsgxwTAeFRaUoj7U',\n  },\n};\nconst KEY = '543520e2fe39929c9088af785c711f59';\n\n// Запит головна \"Фільми дня\"\nexport const fetchTrandinFilm = async () => {\n  const response = await axios.get(\n    'https://api.themoviedb.org/3/trending/movie/day?language=en-US',\n    options\n  );\n  return response.data;\n};\n\n//запрос полной информации о фильме для страницы кинофильма.\nexport const fetchMovieDetails = async id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}?language=en-US`,\n    options\n  );\n  return response.data;\n};\n\n// запрос информации о актёрском составе для страницы кинофильма.\nexport const fetchMovieCast = async id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/credits?language=en-US`,\n    options\n  );\n  return response.data;\n};\n\n// запрос обзоров для страницы кинофильма.\nexport const fetchMovieReviews = async id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/reviews?language=en-US&page=1`,\n    options\n  );\n  return response.data;\n};\nexport const fetchMoviesbySearch = async input => {\n  const response = await axios.get(\n    'https://api.themoviedb.org/3/search/movie',\n    {\n      params: {\n        query: input,\n        api_key: KEY,\n      },\n    }\n  );\n  return response.data;\n};\n"],"names":["CastList","styled","CastItem","Image","ActorName","ActorCharacter","Notification","Cast","useState","castInfo","setCastInfo","moviesId","useParams","useEffect","fetchMovieCast","movieCast","cast","console","log","getCastInfo","length","map","actor","profile_path","src","alt","name","character","id","options","method","headers","accept","Authorization","fetchTrandinFilm","axios","response","data","fetchMovieDetails","fetchMovieReviews","fetchMoviesbySearch","input","params","query","api_key"],"sourceRoot":""}
{"version":3,"file":"static/js/278.f5cb2b61.chunk.js","mappings":"8SAEMA,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NAMOC,EAAgB,mCAAG,oGACPC,EAAAA,EAAAA,IACrB,iEACAN,GAH4B,cACxBO,EADwB,yBAKvBA,EAASC,MALc,2CAAH,qDAShBC,EAAiB,mCAAG,WAAMC,GAAN,uFACRJ,EAAAA,EAAAA,IAAA,6CACiBI,EADjB,mBAErBV,GAH6B,cACzBO,EADyB,yBAKxBA,EAASC,MALe,2CAAH,sDASjBG,EAAc,mCAAG,WAAMD,GAAN,uFACLJ,EAAAA,EAAAA,IAAA,6CACiBI,EADjB,2BAErBV,GAH0B,cACtBO,EADsB,yBAKrBA,EAASC,MALY,2CAAH,sDASdI,EAAiB,mCAAG,WAAMF,GAAN,uFACRJ,EAAAA,EAAAA,IAAA,6CACiBI,EADjB,kCAErBV,GAH6B,cACzBO,EADyB,yBAKxBA,EAASC,MALe,2CAAH,sDAOjBK,EAAmB,mCAAG,WAAMC,GAAN,uFACVR,EAAAA,EAAAA,IACrB,4CACA,CACES,OAAQ,CACNC,MAAOF,EACPG,QA3CI,sCAqCuB,cAC3BV,EAD2B,yBAU1BA,EAASC,MAViB,2CAAH,qD,6LC7CnBU,EAAgBC,EAAAA,EAAAA,IAAH,mH,SCgB1B,EAZe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAChB,OACE,SAACF,EAAD,WACE,SAAC,IAAD,CAAiBE,QAASA,EAASC,MAAM,UAAUC,KAAM,MAG9D,E,wBCRYC,EAAYJ,EAAAA,EAAAA,IAAH,wHAOTK,EAAkBL,EAAAA,EAAAA,KAAH,kZAiBfM,EAAoBN,EAAAA,EAAAA,OAAH,uPAejBO,GAAkBP,EAAAA,EAAAA,GAAOQ,EAAAA,IAAPR,CAAH,yDAKfS,EAAmBT,EAAAA,EAAAA,MAAH,4PAgBhBU,EAAYV,EAAAA,EAAAA,GAAH,8SAmBTW,EAAWX,EAAAA,EAAAA,IAAH,2FAKRY,EAAQZ,EAAAA,EAAAA,IAAH,yJAQLa,GAAYb,EAAAA,EAAAA,GAAOc,EAAAA,GAAPd,CAAH,8JC5EP,SAASe,IAAU,IAAD,EAC/B,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOf,EAAP,KAAgBkB,EAAhB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA0CN,EAAAA,EAAAA,WAAS,GAAnD,eAAOO,EAAP,KAAsBC,EAAtB,KAEM7B,EAAK,UAAG0B,EAAaI,IAAI,gBAApB,QAAgC,GAC3C,GAAsCT,EAAAA,EAAAA,UAAQ,OAACrB,QAAD,IAACA,EAAAA,EAAS,IAAxD,eAAO+B,EAAP,KAAoBC,EAApB,KACMC,GAAWC,EAAAA,EAAAA,MAwCjB,OAnBAC,EAAAA,EAAAA,YAAU,WAAM,wCAId,oGAEIX,GAAW,GAFf,UAI+BzB,EAAAA,EAAAA,GAAoBC,GAJnD,OAIUoC,EAJV,OAKIC,QAAQC,IAAIF,EAAaG,SACzBhB,EAAUa,EAAaG,SACvBf,GAAW,GAPf,kDASIa,QAAQC,IAAR,MATJ,2DAJc,sBACA,KAAVtC,GADU,mCAgBdwC,EACD,GAAE,CAACxC,KAGF,UAACS,EAAD,YACE,UAACC,EAAD,CAAiB+B,SAhCrB,SAA0BC,GACxBA,EAAMC,iBACqB,KAAvBZ,EAAYa,QAKhBjB,EAAgB,CAAE3B,MAAO+B,IACzBF,GAAiB,KALfgB,EAAAA,EAAAA,IAAM,4BAA6B,CAAEC,KAAM,gBAM9C,EAuBG,WACE,SAACnC,EAAD,CAAmBoC,KAAK,SAAxB,UACE,SAACnC,EAAD,OAGF,SAACE,EAAD,CACEkC,KAAK,QACLC,MAAOlB,EACPmB,SAhDR,SAAqBR,GACnBV,EAAeU,EAAMS,cAAcF,OACD,KAA9BP,EAAMS,cAAcF,QACtBtB,EAAgB,CAAC,GACjBJ,EAAU,IAEb,EA2COwB,KAAK,OACLK,aAAa,MACbC,WAAS,EACTC,YAAY,yBAId1B,IACA,+BACE,SAACZ,EAAD,WACE,uBAAG,WAKPV,GACAgB,GACU,KAAVtB,GACA4B,IACE,wBACGN,EAAOiC,KAAI,SAAAC,GAAK,OACf,SAACzC,EAAD,WACE,UAACG,EAAD,CAAWuC,GAAE,UAAKD,EAAM5D,IAAM8D,MAAO,CAAEC,KAAM1B,GAA7C,UACGuB,EAAMI,aACL,SAAC3C,EAAD,CACE4C,IAAG,0CAAqCL,EAAMI,aAC9CE,IAAKN,EAAMO,SAGb,SAAC9C,EAAD,CACE4C,IAAI,mFACJC,IAAKN,EAAMO,SAGf,uBAAIP,EAAMO,YAbEP,EAAM5D,GADP,MAqBtBU,IAAW,SAAC,EAAD,CAAQA,QAASA,KAC7B,SAAC,KAAD,CAAS0D,SAAS,gBAGvB,C","sources":["components/optionsAPI.js","components/Loader/Loader.styled.js","components/Loader/Loader.js","pages/Movies/Movies.styled.js","pages/Movies/Movies.js"],"sourcesContent":["import axios from 'axios';\n\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI1NDM1MjBlMmZlMzk5MjljOTA4OGFmNzg1YzcxMWY1OSIsInN1YiI6IjY0OTkzMmNhYmJkMGIwMDBhZGYxMzUxNyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.41RqzxpX4fIzZ0nIoO92sdGG4PVnsgxwTAeFRaUoj7U',\n  },\n};\nconst KEY = '543520e2fe39929c9088af785c711f59';\n\n// Запит головна \"Фільми дня\"\nexport const fetchTrandinFilm = async () => {\n  const response = await axios.get(\n    'https://api.themoviedb.org/3/trending/movie/day?language=en-US',\n    options\n  );\n  return response.data;\n};\n\n//запрос полной информации о фильме для страницы кинофильма.\nexport const fetchMovieDetails = async id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}?language=en-US`,\n    options\n  );\n  return response.data;\n};\n\n// запрос информации о актёрском составе для страницы кинофильма.\nexport const fetchMovieCast = async id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/credits?language=en-US`,\n    options\n  );\n  return response.data;\n};\n\n// запрос обзоров для страницы кинофильма.\nexport const fetchMovieReviews = async id => {\n  const response = await axios.get(\n    `https://api.themoviedb.org/3/movie/${id}/reviews?language=en-US&page=1`,\n    options\n  );\n  return response.data;\n};\nexport const fetchMoviesbySearch = async input => {\n  const response = await axios.get(\n    'https://api.themoviedb.org/3/search/movie',\n    {\n      params: {\n        query: input,\n        api_key: KEY,\n      },\n    }\n  );\n  return response.data;\n};\n","import styled from '@emotion/styled';\n\nexport const LoaderWrapper = styled.div`\n  display: flex;\n  margin-top: 20px;\n  margin-bottom: 40px;\n  justify-content: center;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport PropagateLoader from 'react-spinners/PropagateLoader';\n\nimport { LoaderWrapper } from './Loader.styled';\n\nconst Loader = ({ loading }) => {\n  return (\n    <LoaderWrapper>\n      <PropagateLoader loading={loading} color=\"#3f51b5\" size={20} />\n    </LoaderWrapper>\n  );\n};\n\nLoader.propTypes = {\n  loading: PropTypes.bool.isRequired,\n};\n\nexport default Loader;\n","import styled from '@emotion/styled';\nimport { FcSearch } from 'react-icons/fc';\nimport { Link } from 'react-router-dom';\n\nexport const Container = styled.div`\n  width: 90%;\n  margin: 0 auto;\n  heigth: 100%;\n  min-height: none;\n  margin-bottom: 20px;\n`;\nexport const MovieSearchForm = styled.form`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  margin: 0 auto;\n  max-width: 900px;\n  justify-content: center;\n  text-align: center;\n  background-color: #fff;\n  border-radius: 3px;\n  overflow: hidden;\n  margin-bottom: 20px;\n\n  box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2),\n    0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n`;\n\nexport const MovieSearchButton = styled.button`\n  display: inline-block;\n  width: 48px;\n  height: 48px;\n  border: 0;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n\n  :hover {\n    opacity: 1;\n  }\n`;\n\nexport const MovieSearchIcon = styled(FcSearch)`\n  width: 20px;\n  height: 20px;\n`;\n\nexport const MovieSearchInput = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding-left: 4px;\n  padding-right: 4px;\n\n  ::placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n\nexport const MovieItem = styled.li`\n  font-family: 'Segoe UI';\n  display: flex;\n  margin-top: 10px;\n  padding: 2px;\n  font-size: 23px;\n  font-weight: 400;\n\n  :hover,\n  :focus {\n    color: rgb(128, 128, 128);\n  }\n\n  ::before {\n    display: flex;\n    align-items: center;\n    margin-right: 5px;\n  }\n`;\nexport const Decorate = styled.div`\n  background-color: #fff;\n  heigth: 500px;\n  margin-top: 800px;\n`;\nexport const Image = styled.img`\n  padding: 16px 32px;\n  width: 100px;\n  border-radius: 4px;\n  object-fit: cover;\n  margin: 0, auto;\n  margin-bottom: 20px;\n`;\nexport const MovieLink = styled(Link)`\n  display: flex;\n  justify-content: start;\n  align-items: center;\n  padding: 16px 32px;\n  text-decoration: none;\n  color: #000;\n`;\n","import { useState, useEffect } from 'react';\nimport { useSearchParams, useLocation } from 'react-router-dom';\nimport Loader from '../../components/Loader/Loader';\n\nimport { fetchMoviesbySearch } from '../../components/optionsAPI';\n\nimport toast, { Toaster } from 'react-hot-toast';\n\nimport {\n  MovieSearchForm,\n  MovieSearchButton,\n  MovieSearchIcon,\n  MovieSearchInput,\n  MovieItem,\n  Container,\n  Decorate,\n  Image,\n  MovieLink,\n} from './Movies.styled';\n\nexport default function Movies() {\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [formSubmitted, setFormSubmitted] = useState(false); // Додано новий стан\n\n  const input = searchParams.get('input') ?? '';\n  const [searchInput, setSearchInput] = useState(input ?? '');\n  const location = useLocation();\n\n  function updateInput(event) {\n    setSearchInput(event.currentTarget.value);\n    if (event.currentTarget.value === '') {\n      setSearchParams({});\n      setMovies([]);\n    }\n  }\n\n  function handleFormSubmit(event) {\n    event.preventDefault();\n    if (searchInput.trim() === '') {\n      toast('Enter image name, please!', { icon: '🧐' });\n      return;\n    }\n\n    setSearchParams({ input: searchInput });\n    setFormSubmitted(true); // Встановлюємо значення true після сабміту форми\n  }\n\n  useEffect(() => {\n    if (input === '') {\n      return;\n    }\n    async function fetchMovies() {\n      try {\n        setLoading(true);\n\n        const searchMovies = await fetchMoviesbySearch(input);\n        console.log(searchMovies.results);\n        setMovies(searchMovies.results);\n        setLoading(false);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    fetchMovies();\n  }, [input]);\n\n  return (\n    <Container>\n      <MovieSearchForm onSubmit={handleFormSubmit}>\n        <MovieSearchButton type=\"submit\">\n          <MovieSearchIcon />\n        </MovieSearchButton>\n\n        <MovieSearchInput\n          name=\"input\"\n          value={searchInput}\n          onChange={updateInput}\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies...\"\n        />\n      </MovieSearchForm>\n\n      {!formSubmitted && ( // Додано перевірку на formSubmitted\n        <>\n          <Decorate>\n            <p> </p>\n          </Decorate>\n        </>\n      )}\n\n      {!loading &&\n        movies &&\n        input !== '' &&\n        formSubmitted && ( // Додано перевірку на formSubmitted\n          <ul>\n            {movies.map(movie => (\n              <MovieItem key={movie.id}>\n                <MovieLink to={`${movie.id}`} state={{ from: location }}>\n                  {movie.poster_path ? (\n                    <Image\n                      src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`}\n                      alt={movie.title}\n                    />\n                  ) : (\n                    <Image\n                      src=\"https://upload.wikimedia.org/wikipedia/commons/4/43/Illustration_of_an_image.png\"\n                      alt={movie.title}\n                    />\n                  )}\n                  <p>{movie.title}</p>\n                </MovieLink>\n              </MovieItem>\n            ))}\n          </ul>\n        )}\n\n      {loading && <Loader loading={loading} />}\n      <Toaster position=\"top-right\" />\n    </Container>\n  );\n}\n"],"names":["options","method","headers","accept","Authorization","fetchTrandinFilm","axios","response","data","fetchMovieDetails","id","fetchMovieCast","fetchMovieReviews","fetchMoviesbySearch","input","params","query","api_key","LoaderWrapper","styled","loading","color","size","Container","MovieSearchForm","MovieSearchButton","MovieSearchIcon","FcSearch","MovieSearchInput","MovieItem","Decorate","Image","MovieLink","Link","Movies","useState","movies","setMovies","setLoading","useSearchParams","searchParams","setSearchParams","formSubmitted","setFormSubmitted","get","searchInput","setSearchInput","location","useLocation","useEffect","searchMovies","console","log","results","fetchMovies","onSubmit","event","preventDefault","trim","toast","icon","type","name","value","onChange","currentTarget","autoComplete","autoFocus","placeholder","map","movie","to","state","from","poster_path","src","alt","title","position"],"sourceRoot":""}